/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalingAssistantPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  journalFolder: "Journal",
  summariesFolder: "Summaries",
  openAIApiKey: "",
  whisperApiKey: "",
  defaultJournalingPrompt: "Generate a thought-provoking journaling prompt for today.",
  defaultSummarizationPrompt: "Summarize the key points and insights from this journal entry.",
  numberOfPastEntries: 3
};

// main.ts
var JournalingAssistantPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new JournalingAssistantSettingTab(this.app, this));
    this.addRibbonIcon("bot", "Journal with AI", async () => {
      await this.openTodaysJournal();
    });
    this.addCommand({
      id: "open-todays-journal",
      name: "Open Today's Journal",
      callback: async () => {
        await this.openTodaysJournal();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("Unloading Journaling Assistant Plugin...");
  }
  insertHelloWorld() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      editor.replaceSelection("Hello World");
    } else {
      new import_obsidian.Notice("No active note is open.");
    }
  }
  getTodayFileName() {
    const date = new Date();
    return date.toISOString().split("T")[0] + ".md";
  }
  async ensureJournalFolder() {
    const folderPath = this.settings.journalFolder;
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  async getPastJournalEntries(count) {
    const folder = this.app.vault.getAbstractFileByPath(this.settings.journalFolder);
    if (!folder)
      return [];
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(this.settings.journalFolder + "/")).sort((a, b) => b.stat.mtime - a.stat.mtime).slice(0, count);
    const entries = await Promise.all(
      files.map(async (file) => {
        const content = await this.app.vault.read(file);
        return {
          date: file.basename,
          content
        };
      })
    );
    return entries.map((entry) => `Date: ${entry.date}
${entry.content}`);
  }
  async generatePromptWithAI(pastEntries) {
    var _a;
    if (!this.settings.openAIApiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const prompt = `Based on these past journal entries:

${pastEntries.join("\n\n---\n\n")}

${this.settings.defaultJournalingPrompt}`;
    console.log("=== GPT API Call Debug ===");
    console.log("Past Entries Count:", pastEntries.length);
    console.log("Prompt:", prompt);
    console.log("API Key (first 4 chars):", this.settings.openAIApiKey.slice(0, 4));
    try {
      const requestBody = {
        model: "gpt-4o",
        messages: [{
          role: "user",
          content: prompt
        }],
        temperature: 0.7
      };
      console.log("Request Body:", JSON.stringify(requestBody, null, 2));
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.openAIApiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      const data = await response.json();
      console.log("Response:", JSON.stringify(data, null, 2));
      if (!response.ok) {
        throw new Error(((_a = data.error) == null ? void 0 : _a.message) || "API request failed");
      }
      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API error:", error);
      throw new Error("Failed to generate prompt: " + error.message);
    }
  }
  async openTodaysJournal() {
    try {
      await this.ensureJournalFolder();
      const fileName = this.getTodayFileName();
      const filePath = `${this.settings.journalFolder}/${fileName}`;
      let file = this.app.vault.getAbstractFileByPath(filePath);
      let initialContent = `# Journal Entry - ${new Date().toLocaleDateString()}

`;
      try {
        const pastEntries = await this.getPastJournalEntries(this.settings.numberOfPastEntries);
        if (pastEntries.length > 0) {
          const aiPrompt = await this.generatePromptWithAI(pastEntries);
          initialContent += `## Today's Prompt

${aiPrompt}

## Your Journal Response

`;
        } else {
          initialContent += `## Your Journal Response

`;
        }
      } catch (error) {
        new import_obsidian.Notice("Error generating prompt: " + error.message);
        initialContent += `## Your Journal Response

`;
      }
      if (!file) {
        file = await this.app.vault.create(filePath, initialContent);
        new import_obsidian.Notice("Created new journal entry for today");
      }
      const leaf = this.app.workspace.getUnpinnedLeaf();
      await leaf.openFile(file);
    } catch (error) {
      new import_obsidian.Notice("Error opening today's journal: " + error.message);
      console.error("Error opening today's journal:", error);
    }
  }
};
var JournalingAssistantSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Journaling Assistant Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal Folder").setDesc("The folder where your journal entries will be stored").addText((text) => text.setPlaceholder("Journal").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Summaries Folder").setDesc("The folder where your journal summaries will be stored").addText((text) => text.setPlaceholder("Summaries").setValue(this.plugin.settings.summariesFolder).onChange(async (value) => {
      this.plugin.settings.summariesFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API key for generating prompts and summaries").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.openAIApiKey).onChange(async (value) => {
      this.plugin.settings.openAIApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Whisper API Key").setDesc("Your Whisper API key for voice-to-text functionality").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.whisperApiKey).onChange(async (value) => {
      this.plugin.settings.whisperApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Journaling Prompt").setDesc("The default prompt used to generate journaling questions").addTextArea((text) => text.setPlaceholder("Generate a thought-provoking journaling prompt for today.").setValue(this.plugin.settings.defaultJournalingPrompt).onChange(async (value) => {
      this.plugin.settings.defaultJournalingPrompt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Summarization Prompt").setDesc("The default prompt used to generate journal entry summaries").addTextArea((text) => text.setPlaceholder("Summarize the key points and insights from this journal entry.").setValue(this.plugin.settings.defaultSummarizationPrompt).onChange(async (value) => {
      this.plugin.settings.defaultSummarizationPrompt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Number of Past Entries").setDesc("Number of past journal entries to consider when generating prompts").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.numberOfPastEntries).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.numberOfPastEntries = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
