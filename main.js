/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalingAssistantPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  journalFolder: "Journal",
  inputsFolder: "Inputs",
  openAIApiKey: "",
  defaultJournalingPrompt: "Generate a thought-provoking journaling prompt for today.",
  defaultSummarizationPrompt: "Summarize the key points and insights from this journal entry.",
  numberOfPastEntries: 3
};

// src/audioTranscriber.ts
var AudioTranscriber = class {
  constructor(vault, apiKey) {
    this.vault = vault;
    this.apiKey = apiKey;
  }
  async transcribeFile(audioFile) {
    var _a;
    try {
      const arrayBuffer = await this.vault.readBinary(audioFile);
      const blob = new Blob([arrayBuffer], { type: "audio/webm" });
      const formData = new FormData();
      formData.append("file", blob, audioFile.name);
      formData.append("model", "whisper-1");
      const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: formData
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(((_a = error.error) == null ? void 0 : _a.message) || "Transcription failed");
      }
      const result = await response.json();
      return result.text;
    } catch (error) {
      console.error("Transcription error:", error);
      throw error;
    }
  }
  static getRecordingEmbedPattern() {
    return /!\[\[Recording \d{14}\.webm\]\]/g;
  }
};

// main.ts
var JournalingAssistantPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new JournalingAssistantSettingTab(this.app, this));
    this.addRibbonIcon("bot", "Journal with AI", async () => {
      await this.openTodaysJournal();
    });
    this.addCommand({
      id: "open-todays-journal",
      name: "Open Today's Journal",
      callback: async () => {
        await this.openTodaysJournal();
      }
    });
    this.addCommand({
      id: "transcribe-recordings",
      name: "Transcribe Recordings",
      callback: async () => {
        await this.transcribeRecordings();
      }
    });
    this.addCommand({
      id: "summarize-journal",
      name: "Summarize Journaling Session",
      callback: async () => {
        await this.summarizeJournalingSession();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("Unloading Journaling Assistant Plugin...");
  }
  getTodayFileName() {
    const date = new Date();
    return date.toISOString().split("T")[0] + ".md";
  }
  async ensureJournalFolder() {
    const folderPath = this.settings.journalFolder;
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  async getPastJournalEntries(count) {
    const folder = this.app.vault.getAbstractFileByPath(this.settings.journalFolder);
    if (!folder)
      return [];
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(this.settings.journalFolder + "/")).sort((a, b) => b.stat.mtime - a.stat.mtime).slice(0, count);
    const entries = await Promise.all(
      files.map(async (file) => {
        const content = await this.app.vault.read(file);
        return {
          date: file.basename,
          content
        };
      })
    );
    return entries.map((entry) => `Date: ${entry.date}
${entry.content}`);
  }
  async generatePromptWithAI(pastEntries) {
    var _a;
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured. Please add your API key in settings.");
      throw new Error("OpenAI API key not configured");
    }
    const prompt = `Based on these past journal entries:

${pastEntries.join("\n\n---\n\n")}

${this.settings.defaultJournalingPrompt}`;
    console.log("=== GPT API Call Debug ===");
    console.log("Past Entries Count:", pastEntries.length);
    console.log("Prompt:", prompt);
    console.log("API Key (first 4 chars):", this.settings.openAIApiKey.slice(0, 4));
    try {
      const requestBody = {
        model: "gpt-4o",
        messages: [{
          role: "user",
          content: prompt
        }],
        temperature: 0.7
      };
      console.log("Request Body:", JSON.stringify(requestBody, null, 2));
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.openAIApiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      const data = await response.json();
      console.log("Response:", JSON.stringify(data, null, 2));
      if (!response.ok) {
        console.error("OpenAI API error details:", {
          status: response.status,
          statusText: response.statusText,
          error: data.error
        });
        const errorMessage = ((_a = data.error) == null ? void 0 : _a.message) || "API request failed";
        new import_obsidian.Notice(`OpenAI API Error: ${errorMessage}`);
        throw new Error(errorMessage);
      }
      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API error:", {
        name: error.name,
        message: error.message,
        stack: error.stack,
        cause: error.cause
      });
      const userMessage = error.message.includes("Failed to fetch") ? "Cannot connect to OpenAI API. Please check your internet connection." : `Error: ${error.message}`;
      new import_obsidian.Notice(userMessage);
      throw new Error("Failed to generate prompt: " + error.message);
    }
  }
  async openTodaysJournal() {
    try {
      await this.ensureJournalFolder();
      const fileName = this.getTodayFileName();
      const filePath = `${this.settings.journalFolder}/${fileName}`;
      console.log("Opening journal with:", {
        fileName,
        filePath,
        journalFolder: this.settings.journalFolder
      });
      let file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        let initialContent = `# Journal Entry - ${new Date().toLocaleDateString()}

`;
        try {
          const pastEntries = await this.getPastJournalEntries(this.settings.numberOfPastEntries);
          if (pastEntries.length > 0) {
            const aiPrompt = await this.generatePromptWithAI(pastEntries);
            initialContent += `## Today's Prompt

${aiPrompt}

## Your Journal Response

`;
          } else {
            initialContent += `## Your Journal Response

`;
          }
        } catch (error) {
          new import_obsidian.Notice("Error generating prompt: " + error.message);
          initialContent += `## Your Journal Response

`;
        }
        file = await this.app.vault.create(filePath, initialContent);
        new import_obsidian.Notice("Created new journal entry for today");
      }
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(file);
    } catch (error) {
      new import_obsidian.Notice("Error opening today's journal: " + error.message);
      console.error("Error opening today's journal:", error);
    }
  }
  async transcribeRecordings() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("Please open a note first");
      return;
    }
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured. Please add your API key in settings.");
      return;
    }
    const editor = activeView.editor;
    const content = editor.getValue();
    const recordingPattern = AudioTranscriber.getRecordingEmbedPattern();
    const recordings = content.match(recordingPattern);
    if (!recordings || recordings.length === 0) {
      new import_obsidian.Notice("No recordings found in the current note");
      return;
    }
    new import_obsidian.Notice("Starting transcription...");
    const transcriber = new AudioTranscriber(this.app.vault, this.settings.openAIApiKey);
    let updatedContent = content;
    try {
      for (const recording of recordings) {
        const fileName = recording.slice(3, -2);
        const file = this.app.metadataCache.getFirstLinkpathDest(fileName, "");
        console.log("Processing recording:", {
          originalLink: recording,
          parsedFileName: fileName,
          resolvedFile: file == null ? void 0 : file.path
        });
        if (file instanceof import_obsidian.TFile) {
          console.log("Sending transcription request for:", file.path);
          const transcript = await transcriber.transcribeFile(file);
          console.log("Received transcription:", transcript);
          updatedContent = updatedContent.replace(recording, transcript);
        }
      }
      editor.setValue(updatedContent);
      new import_obsidian.Notice("Transcription completed successfully");
    } catch (error) {
      new import_obsidian.Notice(`Transcription failed: ${error.message}`);
      console.error("Transcription error:", error);
    }
  }
  async summarizeJournalingSession() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("Please open a note first");
      return;
    }
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured");
      return;
    }
    if (!activeView.file) {
      new import_obsidian.Notice("No file is currently open");
      return;
    }
    try {
      const originalContent = activeView.editor.getValue();
      const fileName = activeView.file.name;
      const inputPath = `${this.settings.inputsFolder}/${fileName}`;
      await this.ensureFolder(this.settings.inputsFolder);
      await this.app.vault.create(inputPath, originalContent);
      let processedContent = originalContent;
      const recordingPattern = AudioTranscriber.getRecordingEmbedPattern();
      const recordings = originalContent.match(recordingPattern);
      if (recordings) {
        const transcriber = new AudioTranscriber(this.app.vault, this.settings.openAIApiKey);
        for (const recording of recordings) {
          const fileName2 = recording.slice(3, -2);
          const file = this.app.metadataCache.getFirstLinkpathDest(fileName2, "");
          if (file instanceof import_obsidian.TFile) {
            const transcript = await transcriber.transcribeFile(file);
            processedContent = processedContent.replace(recording, transcript);
          }
        }
      }
      const responseMatch = processedContent.match(/## Your Journal Response\n\n([\s\S]*$)/);
      if (!responseMatch) {
        new import_obsidian.Notice("Could not find journal response section");
        return;
      }
      const userResponse = responseMatch[1];
      const summary = await this.generateSummaryWithAI(userResponse);
      const updatedContent = processedContent.replace(
        /## Your Journal Response\n\n[\s\S]*$/,
        `## Your Journal Response

${summary}`
      );
      activeView.editor.setValue(updatedContent);
      new import_obsidian.Notice("Journal session summarized");
    } catch (error) {
      new import_obsidian.Notice(`Error: ${error.message}`);
      console.error("Summarization error:", error);
    }
  }
  async generateSummaryWithAI(content) {
    var _a;
    try {
      const requestBody = {
        model: "gpt-4o",
        messages: [{
          role: "user",
          content: `${this.settings.defaultSummarizationPrompt}

${content}`
        }],
        temperature: 0.7
      };
      console.log("=== GPT Summary API Call ===");
      console.log("Request:", {
        prompt: this.settings.defaultSummarizationPrompt,
        content: content.slice(0, 100) + "...",
        // First 100 chars for brevity
        fullBody: requestBody
      });
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.openAIApiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      const data = await response.json();
      console.log("Response:", {
        status: response.status,
        statusText: response.statusText,
        data
      });
      if (!response.ok) {
        throw new Error(((_a = data.error) == null ? void 0 : _a.message) || "Failed to generate summary");
      }
      return data.choices[0].message.content;
    } catch (error) {
      console.error("Summary generation error:", error);
      throw new Error("Failed to generate summary: " + error.message);
    }
  }
  async ensureFolder(folderPath) {
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
};
var JournalingAssistantSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Journaling Assistant Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal Folder").setDesc("The folder where your journal entries will be stored").addText((text) => text.setPlaceholder("Journal").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Journal Inputs Folder").setDesc("The folder where your journal inputs will be stored").addText((text) => text.setPlaceholder("Inputs").setValue(this.plugin.settings.inputsFolder).onChange(async (value) => {
      this.plugin.settings.inputsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API key for generating prompts, summaries, and transcriptions").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.openAIApiKey).onChange(async (value) => {
      this.plugin.settings.openAIApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Journaling Prompt").setDesc("The default prompt used to generate journaling questions").addTextArea((text) => text.setPlaceholder("Generate a thought-provoking journaling prompt for today.").setValue(this.plugin.settings.defaultJournalingPrompt).onChange(async (value) => {
      this.plugin.settings.defaultJournalingPrompt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Summarization Prompt").setDesc("The default prompt used to generate journal entry summaries").addTextArea((text) => text.setPlaceholder("Summarize the key points and insights from this journal entry.").setValue(this.plugin.settings.defaultSummarizationPrompt).onChange(async (value) => {
      this.plugin.settings.defaultSummarizationPrompt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Number of Past Entries").setDesc("Number of past journal entries to consider when generating prompts").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.numberOfPastEntries).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.numberOfPastEntries = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
