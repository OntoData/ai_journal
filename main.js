/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  JournalingAssistantPlugin: () => JournalingAssistantPlugin,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  journalFolder: "Journal",
  inputsFolder: "Inputs",
  openAIApiKey: "",
  numberOfPastEntries: 3,
  useStreamingResponse: true,
  useCustomPrompts: false,
  language: "en",
  customPromptPaths: {
    journal: "",
    chat: "",
    summary: ""
  }
};

// src/core/journal/JournalService.ts
var import_obsidian3 = require("obsidian");

// src/core/transcription/AudioProcessingService.ts
var AudioProcessingService = class {
  constructor(vault) {
    this.vault = vault;
  }
  async convertM4AtoWAV(file) {
    try {
      const arrayBuffer = await this.vault.readBinary(file);
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
      const offlineContext = new OfflineAudioContext(
        audioBuffer.numberOfChannels,
        audioBuffer.length,
        audioBuffer.sampleRate
      );
      const source = offlineContext.createBufferSource();
      source.buffer = audioBuffer;
      source.connect(offlineContext.destination);
      source.start(0);
      const renderedBuffer = await offlineContext.startRendering();
      return {
        buffer: this.createWAVFile(renderedBuffer),
        mimeType: "audio/wav"
      };
    } catch (error) {
      console.error("Error converting M4A to WAV:", error);
      throw new Error("Failed to convert M4A to WAV format");
    }
  }
  createWAVFile(audioBuffer) {
    const length = audioBuffer.length * 2;
    const outputBuffer = new ArrayBuffer(44 + length);
    const view = new DataView(outputBuffer);
    this.writeWAVHeader(view, length, audioBuffer);
    const data = new Float32Array(audioBuffer.getChannelData(0));
    let offset = 44;
    for (let i = 0; i < data.length; i++) {
      const sample = Math.max(-1, Math.min(1, data[i]));
      view.setInt16(offset, sample < 0 ? sample * 32768 : sample * 32767, true);
      offset += 2;
    }
    return outputBuffer;
  }
  writeWAVHeader(view, length, audioBuffer) {
    const writeString = (offset, string) => {
      for (let i = 0; i < string.length; i++) {
        view.setUint8(offset + i, string.charCodeAt(i));
      }
    };
    writeString(0, "RIFF");
    view.setUint32(4, 36 + length, true);
    writeString(8, "WAVE");
    writeString(12, "fmt ");
    view.setUint32(16, 16, true);
    view.setUint16(20, 1, true);
    view.setUint16(22, audioBuffer.numberOfChannels, true);
    view.setUint32(24, audioBuffer.sampleRate, true);
    view.setUint32(28, audioBuffer.sampleRate * 2, true);
    view.setUint16(32, 2, true);
    view.setUint16(34, 16, true);
    writeString(36, "data");
    view.setUint32(40, length, true);
  }
};

// src/core/ai/services/WhisperService.ts
var _WhisperService = class {
  constructor(vault, apiKey) {
    this.vault = vault;
    this.apiKey = apiKey;
    this.audioProcessor = new AudioProcessingService(vault);
  }
  setApiKey(apiKey) {
    this.apiKey = apiKey;
  }
  static isSupportedFormat(file) {
    const extension = file.extension.toLowerCase();
    return _WhisperService.SUPPORTED_FORMATS.includes(extension);
  }
  async prepareAudioForTranscription(file) {
    if (file.extension.toLowerCase() === "m4a") {
      console.log("Converting M4A to WAV format...");
      const { buffer, mimeType: mimeType2 } = await this.audioProcessor.convertM4AtoWAV(file);
      return {
        blob: new Blob([buffer], { type: mimeType2 }),
        mimeType: mimeType2
      };
    }
    const arrayBuffer = await this.vault.readBinary(file);
    const mimeType = _WhisperService.MIME_TYPES[file.extension.toLowerCase()];
    if (!mimeType) {
      throw new Error(`Unsupported MIME type for extension: ${file.extension}`);
    }
    return {
      blob: new Blob([arrayBuffer], { type: mimeType }),
      mimeType
    };
  }
  async transcribeFile(audioFile) {
    var _a;
    try {
      if (!this.apiKey) {
        throw new Error("OpenAI API key is required for transcription");
      }
      if (!_WhisperService.isSupportedFormat(audioFile)) {
        throw new Error(`Unsupported audio format: ${audioFile.extension}`);
      }
      const { blob, mimeType } = await this.prepareAudioForTranscription(audioFile);
      console.log(`Processing file: ${audioFile.name} with MIME type: ${mimeType}`);
      const formData = new FormData();
      const extension = audioFile.extension.toLowerCase() === "m4a" ? "wav" : audioFile.extension;
      formData.append("file", blob, `${audioFile.basename}.${extension}`);
      formData.append("model", "whisper-1");
      const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: formData
      });
      if (!response.ok) {
        const errorData = await response.json();
        console.error("OpenAI API Error:", {
          status: response.status,
          statusText: response.statusText,
          error: errorData
        });
        throw new Error(((_a = errorData.error) == null ? void 0 : _a.message) || `Transcription failed with status ${response.status}`);
      }
      const result = await response.json();
      return result.text;
    } catch (error) {
      console.error("Detailed transcription error:", {
        fileName: audioFile.name,
        extension: audioFile.extension,
        error: error instanceof Error ? {
          message: error.message,
          stack: error.stack
        } : error
      });
      throw error;
    }
  }
};
var WhisperService = _WhisperService;
WhisperService.SUPPORTED_FORMATS = ["flac", "mp3", "mp4", "mpeg", "mpga", "m4a", "ogg", "wav", "webm"];
WhisperService.MIME_TYPES = {
  "flac": "audio/flac",
  "mp3": "audio/mpeg",
  "mp4": "audio/mp4",
  "mpeg": "audio/mpeg",
  "mpga": "audio/mpeg",
  "m4a": "audio/mp4",
  "ogg": "audio/ogg",
  "wav": "audio/wav",
  "webm": "audio/webm"
};

// src/core/transcription/TranscriptionService.ts
var import_obsidian = require("obsidian");

// src/utils/helpers.ts
var getRecordingEmbedPattern = () => {
  return /!\[\[.+\.(flac|mp3|mp4|mpeg|mpga|m4a|ogg|wav|webm)\]\]/g;
};
var getTodayFileName = () => {
  const date = new Date();
  return date.toISOString().split("T")[0] + ".md";
};

// src/core/transcription/TranscriptionService.ts
var TranscriptionService = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
    this.whisperService = new WhisperService(this.app.vault, this.settings.openAIApiKey);
  }
  updateSettings(settings) {
    this.settings = settings;
    this.whisperService.setApiKey(settings.openAIApiKey);
  }
  async transcribeRecordings() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("Please open a note first");
      return;
    }
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured");
      return;
    }
    const editor = activeView.editor;
    const content = editor.getValue();
    const recordingPattern = getRecordingEmbedPattern();
    const recordings = content.match(recordingPattern);
    if (!recordings || recordings.length === 0) {
      new import_obsidian.Notice("No recordings found in the current note");
      return;
    }
    new import_obsidian.Notice("Starting transcription...");
    let updatedContent = content;
    let hasErrors = false;
    try {
      for (const recording of recordings) {
        const fileName = recording.slice(3, -2);
        const file = this.app.metadataCache.getFirstLinkpathDest(fileName, "");
        if (!(file instanceof import_obsidian.TFile)) {
          new import_obsidian.Notice(`Could not find file: ${fileName}`);
          hasErrors = true;
          continue;
        }
        try {
          const transcript = await this.whisperService.transcribeFile(file);
          updatedContent = updatedContent.replace(recording, transcript);
        } catch (error) {
          new import_obsidian.Notice(`Failed to transcribe ${fileName}: ${error.message}`);
          hasErrors = true;
          continue;
        }
      }
      editor.setValue(updatedContent);
      if (hasErrors) {
        new import_obsidian.Notice("Transcription completed with some errors");
      } else {
        new import_obsidian.Notice("Transcription completed successfully");
      }
    } catch (error) {
      new import_obsidian.Notice(`Transcription failed: ${error.message}`);
      console.error("Transcription error:", error);
    }
  }
};

// src/core/summary/SummarizationService.ts
var import_obsidian2 = require("obsidian");
var SummarizationService = class {
  constructor(openAIService, promptService) {
    this.openAIService = openAIService;
    this.promptService = promptService;
  }
  async summarize(content, useStreaming = false, onChunk) {
    try {
      const summaryPrompt = await this.promptService.getPrompt("summary");
      const prompt = `${summaryPrompt}

${content}`;
      return await this.openAIService.makeOpenAIRequest(
        prompt,
        useStreaming ? onChunk : void 0
      );
    } catch (error) {
      new import_obsidian2.Notice(`Error during summarization: ${error.message}`);
      throw error;
    }
  }
};

// src/core/ai/services/ChatService.ts
var ChatService = class {
  constructor(openAIService, promptService) {
    this.openAIService = openAIService;
    this.promptService = promptService;
  }
  async chat(transcribedText) {
    const chatPrompt = await this.promptService.getPrompt("chat");
    const prompt = `${chatPrompt}

User: ${transcribedText}

Assistant:`;
    return this.openAIService.makeOpenAIRequest(prompt);
  }
};

// src/core/journal/JournalManager.ts
var JournalManager = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  async ensureFolder(folderPath) {
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  getTodayFileName() {
    return getTodayFileName();
  }
  async getPastJournalEntries(count) {
    const folder = this.app.vault.getAbstractFileByPath(this.settings.journalFolder);
    if (!folder)
      return [];
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(this.settings.journalFolder + "/")).sort((a, b) => b.stat.mtime - a.stat.mtime).slice(1, count + 1);
    const entries = await Promise.all(
      files.map(async (file) => {
        const content = await this.app.vault.read(file);
        return {
          date: file.basename,
          content
        };
      })
    );
    return entries.map((entry) => `Date: ${entry.date}
${entry.content}`);
  }
  async createNewJournalEntry() {
    const fileName = this.getTodayFileName();
    const filePath = `${this.settings.journalFolder}/${fileName}`;
    const initialContent = `# Journal Entry - ${new Date().toLocaleDateString()}

`;
    return await this.app.vault.create(filePath, initialContent);
  }
};

// src/core/journal/JournalService.ts
var _JournalService = class {
  constructor(app, settings, openAIService, promptService) {
    this.app = app;
    this.settings = settings;
    this.openAIService = openAIService;
    this.promptService = promptService;
    this.journalManager = new JournalManager(this.app, this.settings);
    this.whisperService = new WhisperService(this.app.vault, this.settings.openAIApiKey);
    this.summarizationService = new SummarizationService(this.openAIService, this.promptService);
    this.chatService = new ChatService(this.openAIService, this.promptService);
    this.transcriptionService = new TranscriptionService(this.app, this.settings);
  }
  updateSettings(settings) {
    this.settings = settings;
    this.whisperService.setApiKey(settings.openAIApiKey);
    this.transcriptionService.updateSettings(settings);
    this.openAIService.updateSettings(settings);
  }
  async openTodaysJournal() {
    try {
      await this.journalManager.ensureFolder(this.settings.journalFolder);
      const filePath = `${this.settings.journalFolder}/${this.journalManager.getTodayFileName()}`;
      let file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        const loadingNotice = new import_obsidian3.Notice("Generating journal prompt...", 0);
        try {
          file = await this.journalManager.createNewJournalEntry();
          const pastEntries = await this.journalManager.getPastJournalEntries(this.settings.numberOfPastEntries);
          const leaf = this.app.workspace.getLeaf(false);
          await leaf.openFile(file);
          const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
          if (view) {
            if (this.settings.useStreamingResponse) {
              await this.openAIService.makeOpenAIRequest(
                await this.createJournalPrompt(pastEntries),
                (chunk) => {
                  const currentContent = view.editor.getValue();
                  view.editor.setValue(currentContent + chunk);
                }
              );
            } else {
              const aiPrompt = await this.openAIService.makeOpenAIRequest(
                await this.createJournalPrompt(pastEntries)
              );
              view.editor.setValue(view.editor.getValue() + aiPrompt);
            }
            view.editor.setValue(view.editor.getValue() + "\n\n## Your Journal Response\n\n");
          }
          loadingNotice.hide();
          new import_obsidian3.Notice("Created new journal entry for today");
        } catch (error) {
          new import_obsidian3.Notice("Error generating prompt: " + error.message);
          const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
          if (view) {
            view.editor.setValue(view.editor.getValue() + "\n\n## Your Journal Response\n\n");
          }
        }
      } else {
        const leaf = this.app.workspace.getLeaf(false);
        await leaf.openFile(file);
      }
    } catch (error) {
      new import_obsidian3.Notice("Error opening today's journal: " + error.message);
      console.error("Error opening today's journal:", error);
    }
  }
  async createJournalPrompt(pastEntries) {
    const journalPrompt = await this.promptService.getPrompt("journal");
    const pastEntriesText = pastEntries.length > 0 ? `Past Entries:

${pastEntries.join("\n\n---\n\n")}` : "No past entries available.";
    return `${journalPrompt}

${pastEntriesText}`;
  }
  async summarizeJournalingSession() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView || !activeView.file) {
      new import_obsidian3.Notice("Please open a note first");
      return;
    }
    try {
      const originalContent = activeView.editor.getValue();
      const fileName = activeView.file.name;
      const inputPath = `${this.settings.inputsFolder}/${fileName}`;
      await this.journalManager.ensureFolder(this.settings.inputsFolder);
      await this.app.vault.create(inputPath, originalContent);
      await this.transcriptionService.transcribeRecordings();
      const processedContent = activeView.editor.getValue();
      const responseMatch = processedContent.match(_JournalService.JOURNAL_RESPONSE_PATTERN);
      if (!responseMatch) {
        new import_obsidian3.Notice("Could not find journal response section");
        return;
      }
      const userResponse = responseMatch[1].trim();
      let summary;
      if (this.settings.useStreamingResponse) {
        let streamedSummary = "";
        summary = await this.summarizationService.summarize(
          userResponse,
          true,
          (chunk) => {
            streamedSummary += chunk;
            const updatedContent = processedContent.replace(
              _JournalService.JOURNAL_RESPONSE_PATTERN,
              `## Your Journal Response

${streamedSummary}`
            );
            activeView.editor.setValue(updatedContent);
          }
        );
      } else {
        summary = await this.summarizationService.summarize(userResponse);
        const updatedContent = processedContent.replace(
          _JournalService.JOURNAL_RESPONSE_PATTERN,
          `## Your Journal Response

${summary}`
        );
        activeView.editor.setValue(updatedContent);
      }
      new import_obsidian3.Notice("Journal session summarized");
    } catch (error) {
      new import_obsidian3.Notice(`Error: ${error.message}`);
      console.error("Summarization error:", error);
    }
  }
  async chatWithAI() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView) {
      new import_obsidian3.Notice("Please open a note first");
      return;
    }
    try {
      await this.transcriptionService.transcribeRecordings();
      const content = activeView.editor.getValue();
      const chatResponse = await this.chatService.chat(content);
      activeView.editor.setValue(
        content + "\n\n---\n## AI Chat\n\n" + chatResponse + "\n\n---\n## Me\n"
      );
      new import_obsidian3.Notice("AI responded in note");
    } catch (error) {
      new import_obsidian3.Notice(`Error during chat: ${error.message}`);
    }
  }
};
var JournalService = _JournalService;
JournalService.JOURNAL_RESPONSE_PATTERN = /## Your Journal Response\s*([\s\S]*$)/;

// src/core/ai/services/OpenAIService.ts
var OpenAIService = class {
  constructor(settings) {
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  async makeOpenAIRequest(prompt, onChunk) {
    var _a, _b, _c, _d;
    if (!this.settings.openAIApiKey) {
      throw new Error("OpenAI API key not configured");
    }
    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.openAIApiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.7,
          stream: !!onChunk
        })
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(((_a = error.error) == null ? void 0 : _a.message) || "API request failed");
      }
      if (onChunk) {
        const reader = (_b = response.body) == null ? void 0 : _b.getReader();
        const decoder = new TextDecoder();
        let fullResponse = "";
        if (!reader)
          throw new Error("Response body is null");
        while (true) {
          const { done, value } = await reader.read();
          if (done)
            break;
          const chunk = decoder.decode(value);
          const lines = chunk.split("\n").filter((line) => line.trim() !== "");
          for (const line of lines) {
            if (line.includes("[DONE]"))
              continue;
            if (!line.startsWith("data:"))
              continue;
            try {
              const json = JSON.parse(line.slice(5));
              const content = (_d = (_c = json.choices[0]) == null ? void 0 : _c.delta) == null ? void 0 : _d.content;
              if (content) {
                fullResponse += content;
                onChunk(content);
              }
            } catch (e) {
              console.warn("Failed to parse streaming response:", e);
            }
          }
        }
        return fullResponse;
      }
      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API error:", error);
      throw error;
    }
  }
};

// src/settings/SettingTab.ts
var import_obsidian4 = require("obsidian");
var JournalingAssistantSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Journaling Assistant Settings" });
    new import_obsidian4.Setting(containerEl).setName("Journal Folder").setDesc("The folder where your journal entries will be stored").addText((text) => text.setPlaceholder("Journal").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Journal Inputs Folder").setDesc("The folder where your journal inputs will be stored").addText((text) => text.setPlaceholder("Inputs").setValue(this.plugin.settings.inputsFolder).onChange(async (value) => {
      this.plugin.settings.inputsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API key for generating prompts and summaries").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.openAIApiKey).onChange(async (value) => {
      this.plugin.settings.openAIApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Number of Past Entries").setDesc("Number of past journal entries to consider when generating prompts").addSlider((slider) => slider.setLimits(0, 10, 1).setValue(this.plugin.settings.numberOfPastEntries).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.numberOfPastEntries = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(containerEl).setName("Use Streaming Response").setDesc("Stream AI responses in real-time (recommended for better experience)").addToggle((toggle) => toggle.setValue(this.plugin.settings.useStreamingResponse).onChange(async (value) => {
      this.plugin.settings.useStreamingResponse = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Prompt Settings" });
    new import_obsidian4.Setting(containerEl).setName("Use Custom Prompts").setDesc("Toggle between default language prompts and custom prompts").addToggle((toggle) => toggle.setValue(this.plugin.settings.useCustomPrompts).onChange(async (value) => {
      this.plugin.settings.useCustomPrompts = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (!this.plugin.settings.useCustomPrompts) {
      new import_obsidian4.Setting(containerEl).setName("Language").setDesc("Select prompt language").addDropdown((dropdown) => dropdown.addOption("en", "English").addOption("pl", "Polish").setValue(this.plugin.settings.language).onChange(async (value) => {
        this.plugin.settings.language = value;
        await this.plugin.saveSettings();
      }));
    } else {
      new import_obsidian4.Setting(containerEl).setName("Journal Prompt File").setDesc("Path to custom journal prompt file").addText((text) => text.setPlaceholder("prompts/journal.md").setValue(this.plugin.settings.customPromptPaths.journal).onChange(async (value) => {
        this.plugin.settings.customPromptPaths.journal = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian4.Setting(containerEl).setName("Chat Prompt File").setDesc("Path to custom chat prompt file").addText((text) => text.setPlaceholder("prompts/chat.md").setValue(this.plugin.settings.customPromptPaths.chat).onChange(async (value) => {
        this.plugin.settings.customPromptPaths.chat = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian4.Setting(containerEl).setName("Summary Prompt File").setDesc("Path to custom summary prompt file").addText((text) => text.setPlaceholder("prompts/summary.md").setValue(this.plugin.settings.customPromptPaths.summary).onChange(async (value) => {
        this.plugin.settings.customPromptPaths.summary = value;
        await this.plugin.saveSettings();
      }));
    }
  }
};

// src/core/ai/prompts/en/chatPrompt.ts
var chatPrompt_default = `As an AI journaling assistant, you are helping the user explore their thoughts and goals.
Guiding principles:
\u2022 Maintain a friendly, empathetic tone
\u2022 Please keep it a conversation, not a list of questions, use second person, and use the word "you"
\u2022 The user should feel like they are talking to a wise mentor friend
\u2022 Ask clarifying questions or deeper prompts
\u2022 Avoid steering the user to specific beliefs or conclusions unless they are explicitly asking for it
\u2022 Keep the conversation relevant to the user's stated goals
\u2022 Encourage reflection and actionable outcomes where appropriate
Remember: all interactions take place in the user's note.`;

// src/core/ai/prompts/en/journalPrompt.ts
var journalPrompt_default = `As a friendly journaling guide, analyze these past journal entries and create a thought-provoking prompt 
that encourages deeper self-reflection while maintaining continuity with previous themes and insights. 
Write the outline in a second person, the user should feel like they are talking to a friend.

Before the prompt:
1. Outline the aspects of past entries to allow for better self-reflection, only if there are past entries.
2. Don't make up information, only use the information that is provided in the past entries.
3. Keep a friendly tone, the user should feel like they are talking to a friend
4. Be concise and to the point
5. Always start with "## Recap of past entries", even if there are no past entries.
6. If there's an information that there are no past entries, just write "No past entries available."

The prompt should:
1. Be specific and actionable
2. Keep a friendly tone, the user should feel like they are talking to a friend
3. Don't steer the user into any particular direction, we want to let the user explore their own thoughts and feelings
4. Make the prompt open-ended, in the first message we want to explore how the user is feeling today and what they want to achieve with the journal
5. Inform the user that they can choose one question and continue conversation with the assistant
6. Be concise, if you ask questions, make them a list of bullet points so it's easy to read
7. Start with "## Today's Prompt"

Keep the prompt concise and focused on a single aspect of self-reflection. Please structure your output so it's easy to read and understand.

The final structure should look like this:

## Recap of past entries
<outline of past entries>

## Today's Prompt
<prompt>`;

// src/core/ai/prompts/en/summaryPrompt.ts
var summaryPrompt_default = `As a journaling assistant, analyze this journal entry and create a summary of journaling conversation.

Please follow these guidelines:

1. Think about the highlights of the journal entry that the user would want to remember for the future
2. Retrieve the memories of the user from the journal entry
3. Identify the main themes and insights
4. Highlight key realizations or breakthroughs
5. Note any action items or intentions expressed
6. Preserve the emotional tone of the entry

Focus on extracting the most meaningful elements while maintaining the personal nature of the reflection.`;

// src/core/ai/prompts/pl/chatPrompt.ts
var chatPrompt_default2 = `Jako asystent AI do prowadzenia dziennika, pomagasz u\u017Cytkownikowi eksplorowa\u0107 jego my\u015Bli i cele.
Zasady przewodnie:
\u2022 Zachowaj przyjazny, empatyczny ton
\u2022 Prowad\u017A konwersacj\u0119, nie list\u0119 pyta\u0144, u\u017Cywaj drugiej osoby i s\u0142owa "ty"
\u2022 U\u017Cytkownik powinien czu\u0107, \u017Ce rozmawia z m\u0105drym przyjacielem-mentorem
\u2022 Zadawaj pytania wyja\u015Bniaj\u0105ce lub g\u0142\u0119bsze
\u2022 Unikaj kierowania u\u017Cytkownika w stron\u0119 konkretnych przekona\u0144 lub wniosk\xF3w, chyba \u017Ce wyra\u017Anie o to prosi
\u2022 Utrzymuj rozmow\u0119 zwi\u0105zan\u0105 z okre\u015Blonymi celami u\u017Cytkownika
\u2022 Zach\u0119caj do refleksji i dzia\u0142a\u0144, gdy to w\u0142a\u015Bciwe
Pami\u0119taj: wszystkie interakcje odbywaj\u0105 si\u0119 w notatce u\u017Cytkownika.`;

// src/core/ai/prompts/pl/journalPrompt.ts
var journalPrompt_default2 = `Jako przyjazny przewodnik po dzienniku, przeanalizuj poprzednie wpisy i stw\xF3rz sk\u0142aniaj\u0105ce do my\u015Blenia pytanie,
kt\xF3re zach\u0119ci do g\u0142\u0119bszej autorefleksji, zachowuj\u0105c ci\u0105g\u0142o\u015B\u0107 z poprzednimi tematami i spostrze\u017Ceniami.
Pisz w drugiej osobie, u\u017Cytkownik powinien czu\u0107, \u017Ce rozmawia z przyjacielem.

Przed pytaniem:
1. Przedstaw aspekty poprzednich wpis\xF3w, aby umo\u017Cliwi\u0107 lepsz\u0105 autorefleksj\u0119, tylko je\u015Bli s\u0105 poprzednie wpisy.
2. Nie wymy\u015Blaj informacji, u\u017Cywaj tylko tych, kt\xF3re znajduj\u0105 si\u0119 w poprzednich wpisach.
3. Zachowaj przyjazny ton, u\u017Cytkownik powinien czu\u0107, \u017Ce rozmawia z przyjacielem
4. B\u0105d\u017A zwi\u0119z\u0142y i rzeczowy
5. Zawsze zaczynaj od "## Podsumowanie poprzednich wpis\xF3w", nawet je\u015Bli nie ma poprzednich wpis\xF3w.
6. Je\u015Bli nie ma poprzednich wpis\xF3w, napisz po prostu "Brak poprzednich wpis\xF3w."

Pytanie powinno:
1. By\u0107 konkretne i mo\u017Cliwe do realizacji
2. Zachowa\u0107 przyjazny ton, u\u017Cytkownik powinien czu\u0107, \u017Ce rozmawia z przyjacielem
3. Nie kierowa\u0107 u\u017Cytkownika w \u017Cadnym konkretnym kierunku, chcemy pozwoli\u0107 u\u017Cytkownikowi eksplorowa\u0107 w\u0142asne my\u015Bli i uczucia
4. By\u0107 otwarte, w pierwszej wiadomo\u015Bci chcemy pozna\u0107, jak u\u017Cytkownik czuje si\u0119 dzi\u015B i co chce osi\u0105gn\u0105\u0107 poprzez dziennik
5. Poinformowa\u0107 u\u017Cytkownika, \u017Ce mo\u017Ce wybra\u0107 jedno pytanie i kontynuowa\u0107 rozmow\u0119 z asystentem
6. By\u0107 zwi\u0119z\u0142e, je\u015Bli zadajesz pytania, przedstaw je jako list\u0119 punkt\xF3w, aby by\u0142y \u0142atwe do przeczytania
7. Zaczyna\u0107 si\u0119 od "## Dzisiejsze pytanie"

Zachowaj zwi\u0119z\u0142o\u015B\u0107 pytania i skup si\u0119 na jednym aspekcie autorefleksji. Prosz\u0119 ustrukturyzuj swoj\u0105 odpowied\u017A tak, aby by\u0142a \u0142atwa do przeczytania i zrozumienia.

Ko\u0144cowa struktura powinna wygl\u0105da\u0107 tak:

## Podsumowanie poprzednich wpis\xF3w
<zarys poprzednich wpis\xF3w>

## Dzisiejsze pytanie
<pytanie>`;

// src/core/ai/prompts/pl/summaryPrompt.ts
var summaryPrompt_default2 = `Jako asystent prowadzenia dziennika, przeanalizuj ten wpis i stw\xF3rz podsumowanie rozmowy.

Prosz\u0119 post\u0119puj zgodnie z tymi wytycznymi:

1. Pomy\u015Bl o najwa\u017Cniejszych punktach wpisu, kt\xF3re u\u017Cytkownik chcia\u0142by zapami\u0119ta\u0107 na przysz\u0142o\u015B\u0107
2. Wydob\u0105d\u017A wspomnienia u\u017Cytkownika z wpisu
3. Zidentyfikuj g\u0142\xF3wne tematy i spostrze\u017Cenia
4. Podkre\u015Bl kluczowe odkrycia lub prze\u0142omowe momenty
5. Zanotuj wszelkie zaplanowane dzia\u0142ania lub wyra\u017Cone intencje
6. Zachowaj emocjonalny ton wpisu

Skup si\u0119 na wydobyciu najbardziej znacz\u0105cych element\xF3w, zachowuj\u0105c osobisty charakter refleksji.`;

// src/core/ai/services/PromptService.ts
var PromptService = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
    this.defaultPrompts = {
      en: {
        chat: chatPrompt_default,
        journal: journalPrompt_default,
        summary: summaryPrompt_default
      },
      pl: {
        chat: chatPrompt_default2,
        journal: journalPrompt_default2,
        summary: summaryPrompt_default2
      }
    };
  }
  async getPrompt(type) {
    if (this.settings.useCustomPrompts) {
      const path = this.settings.customPromptPaths[type];
      if (!path) {
        throw new Error(`Custom prompt path not set for ${type}`);
      }
      const file = this.app.vault.getAbstractFileByPath(path);
      if (!file) {
        throw new Error(`Custom prompt file not found: ${path}`);
      }
      try {
        return await this.app.vault.read(file);
      } catch (error) {
        throw new Error(`Failed to read custom prompt file: ${error.message}`);
      }
    }
    return this.defaultPrompts[this.settings.language][type];
  }
  updateSettings(settings) {
    this.settings = settings;
  }
};

// main.ts
var JournalingAssistantPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.openAIService = new OpenAIService(this.settings);
    this.transcriptionService = new TranscriptionService(this.app, this.settings);
    this.promptService = new PromptService(this.app, this.settings);
    this.journalService = new JournalService(
      this.app,
      this.settings,
      this.openAIService,
      this.promptService
    );
    this.addSettingTab(new JournalingAssistantSettingTab(this.app, this));
    this.addRibbonIcon("bot", "Journaling Assistant", (evt) => {
      const menu = new import_obsidian5.Menu();
      menu.addItem(
        (item) => item.setTitle("Open Today's Journal").setIcon("calendar-plus").onClick(() => {
          this.journalService.openTodaysJournal();
        })
      );
      menu.addItem(
        (item) => item.setTitle("Chat with AI").setIcon("message-square").onClick(() => {
          this.journalService.chatWithAI();
        })
      );
      menu.addItem(
        (item) => item.setTitle("Summarize Journaling Session").setIcon("book").onClick(() => {
          this.journalService.summarizeJournalingSession();
        })
      );
      menu.showAtMouseEvent(evt);
    });
    this.addCommands();
  }
  addCommands() {
    this.addCommand({
      id: "open-todays-journal",
      name: "Open Today's Journal",
      callback: async () => {
        await this.journalService.openTodaysJournal();
      }
    });
    this.addCommand({
      id: "transcribe-recordings",
      name: "Transcribe Recordings",
      callback: async () => {
        await this.transcriptionService.transcribeRecordings();
      }
    });
    this.addCommand({
      id: "summarize-journal",
      name: "Summarize Journaling Session",
      callback: async () => {
        await this.journalService.summarizeJournalingSession();
      }
    });
    this.addCommand({
      id: "chat-with-ai",
      name: "Chat with AI",
      callback: async () => {
        await this.journalService.chatWithAI();
      }
    });
  }
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.openAIService.updateSettings(this.settings);
    this.transcriptionService.updateSettings(this.settings);
    this.journalService.updateSettings(this.settings);
    this.promptService.updateSettings(this.settings);
  }
  onunload() {
    console.log("Unloading Journaling Assistant Plugin...");
  }
};
var main_default = JournalingAssistantPlugin;
//# sourceMappingURL=data:application/json;base64,
