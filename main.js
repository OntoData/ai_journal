/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  JournalingAssistantPlugin: () => JournalingAssistantPlugin,
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  journalFolder: "Journal",
  inputsFolder: "Inputs",
  openAIApiKey: "",
  numberOfPastEntries: 3,
  useStreamingResponse: true
};

// src/services/JournalService.ts
var import_obsidian4 = require("obsidian");

// src/services/TranscriptionService.ts
var import_obsidian = require("obsidian");
var TranscriptionService = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
    this.whisperService = new WhisperService(this.app.vault, this.settings.openAIApiKey);
  }
  updateSettings(settings) {
    this.settings = settings;
    this.whisperService.setApiKey(settings.openAIApiKey);
  }
  /**
   * Checks if the file format is directly supported by Whisper API
   */
  static isSupportedFormat(file) {
    const supportedFormats = ["flac", "mp3", "mp4", "mpeg", "mpga", "m4a", "ogg", "wav", "webm"];
    const extension = file.extension.toLowerCase();
    return supportedFormats.includes(extension);
  }
  /**
   * Prepares audio file for transcription
   */
  async prepareAudioForTranscription(file) {
    const arrayBuffer = await this.app.vault.readBinary(file);
    const extension = file.extension.toLowerCase();
    const mimeTypes = {
      "flac": "audio/flac",
      "mp3": "audio/mpeg",
      "mp4": "audio/mp4",
      "mpeg": "audio/mpeg",
      "mpga": "audio/mpeg",
      "m4a": "audio/mp4",
      "ogg": "audio/ogg",
      "wav": "audio/wav",
      "webm": "audio/webm"
    };
    const mimeType = mimeTypes[extension];
    if (!mimeType) {
      throw new Error(`Unsupported MIME type for extension: ${extension}`);
    }
    return {
      blob: new Blob([arrayBuffer], { type: mimeType }),
      mimeType
    };
  }
  /**
   * Returns a RegExp pattern that matches Obsidian's embed syntax for supported audio formats
   */
  static getRecordingEmbedPattern() {
    return /!\[\[.+\.(flac|mp3|mp4|mpeg|mpga|m4a|ogg|wav|webm)\]\]/g;
  }
  async transcribeRecordings() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("Please open a note first");
      return;
    }
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured");
      return;
    }
    const editor = activeView.editor;
    const content = editor.getValue();
    const recordingPattern = TranscriptionService.getRecordingEmbedPattern();
    const recordings = content.match(recordingPattern);
    if (!recordings || recordings.length === 0) {
      new import_obsidian.Notice("No recordings found in the current note");
      return;
    }
    new import_obsidian.Notice("Starting transcription...");
    let updatedContent = content;
    let hasErrors = false;
    try {
      for (const recording of recordings) {
        const fileName = recording.slice(3, -2);
        const file = this.app.metadataCache.getFirstLinkpathDest(fileName, "");
        if (!(file instanceof import_obsidian.TFile)) {
          new import_obsidian.Notice(`Could not find file: ${fileName}`);
          hasErrors = true;
          continue;
        }
        try {
          const transcript = await this.whisperService.transcribeFile(file);
          updatedContent = updatedContent.replace(recording, transcript);
        } catch (error) {
          new import_obsidian.Notice(`Failed to transcribe ${fileName}: ${error.message}`);
          hasErrors = true;
          continue;
        }
      }
      editor.setValue(updatedContent);
      if (hasErrors) {
        new import_obsidian.Notice("Transcription completed with some errors");
      } else {
        new import_obsidian.Notice("Transcription completed successfully");
      }
    } catch (error) {
      new import_obsidian.Notice(`Transcription failed: ${error.message}`);
      console.error("Transcription error:", error);
    }
  }
};

// src/services/WhisperService.ts
var WhisperService = class {
  constructor(vault, apiKey) {
    this.vault = vault;
    this.apiKey = apiKey;
  }
  setApiKey(apiKey) {
    this.apiKey = apiKey;
  }
  async transcribeFile(audioFile) {
    var _a;
    try {
      if (!this.apiKey) {
        throw new Error("OpenAI API key is required for transcription");
      }
      if (!TranscriptionService.isSupportedFormat(audioFile)) {
        throw new Error(`Unsupported audio format: ${audioFile.extension}`);
      }
      const formData = new FormData();
      const arrayBuffer = await this.vault.readBinary(audioFile);
      const blob = new Blob([arrayBuffer], { type: `audio/${audioFile.extension}` });
      formData.append("file", blob, `${audioFile.basename}.${audioFile.extension}`);
      formData.append("model", "whisper-1");
      const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: formData
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(((_a = error.error) == null ? void 0 : _a.message) || "Transcription failed");
      }
      const result = await response.json();
      return result.text;
    } catch (error) {
      console.error("Transcription error:", error);
      throw error;
    }
  }
};

// src/services/SummarizationService.ts
var import_obsidian2 = require("obsidian");

// src/prompts/summaryPrompt.ts
var summaryPrompt_default = `As a journaling assistant, analyze this journal entry and create a concise summary that:

1. Identifies the main themes and insights
2. Highlights key realizations or breakthroughs
3. Notes any action items or intentions expressed
4. Preserves the emotional tone of the entry

Focus on extracting the most meaningful elements while maintaining the personal nature of the reflection.`;

// src/services/SummarizationService.ts
var SummarizationService = class {
  constructor(openAIService) {
    this.openAIService = openAIService;
  }
  /**
   * Takes the user's journal response and returns a summary
   * @param content The content to summarize
   * @param useStreaming Whether to stream the response
   * @param onChunk Optional callback for streaming responses
   */
  async summarize(content, useStreaming = false, onChunk) {
    try {
      const prompt = `${summaryPrompt_default}

${content}`;
      return await this.openAIService.makeOpenAIRequest(
        prompt,
        useStreaming ? onChunk : void 0
      );
    } catch (error) {
      new import_obsidian2.Notice(`Error during summarization: ${error.message}`);
      throw error;
    }
  }
};

// src/services/PromptService.ts
var import_obsidian3 = require("obsidian");

// src/prompts/journalPrompt.ts
var journalPrompt_default = `As a friendly journaling guide, analyze these past journal entries and create a thought-provoking prompt 
that encourages deeper self-reflection while maintaining continuity with previous themes and insights. 
Write the outline in a second person, the user should feel like they are talking to a friend.

Before the prompt:
1. Outline the aspects of past entries to allow for better self-reflection, only if there are past entries.
2. Don't make up information, only use the information that is provided in the past entries.
3. Keep a friendly tone, the user should feel like they are talking to a friend
4. Be concise and to the point
5. Always start with "## Recap of past entries", even if there are no past entries.
6. If there's an information that there are no past entries, just write "No past entries available."

The prompt should:
1. Be specific and actionable
2. Keep a friendly tone, the user should feel like they are talking to a friend
3. Don't steer the user into any particular direction, we want to let the user explore their own thoughts and feelings
4. Make the prompt open-ended, in the first message we want to explore how the user is feeling today and what they want to achieve with the journal
5. Inform the user that they can choose one question and continue conversation with the assistant
6. Be concise, if you ask questions, make them a list of bullet points so it's easy to read
7. Start with "## Today's Prompt"

Keep the prompt concise and focused on a single aspect of self-reflection. Please structure your output so it's easy to read and understand.


The final structure should look like this:

## Recap of past entries
<outline of past entries>

## Today's Prompt
<prompt>`;

// src/services/PromptService.ts
var PromptService = class {
  constructor(openAIService) {
    this.openAIService = openAIService;
  }
  /**
   * Generates a journal prompt based on past entries
   * @param pastEntries Array of past journal entries
   * @param onChunk Optional callback for streaming responses
   */
  async generatePrompt(pastEntries, onChunk) {
    try {
      const pastEntriesText = pastEntries.length > 0 ? `Past Entries:

${pastEntries.join("\n\n---\n\n")}` : "No past entries available.";
      const prompt = `${journalPrompt_default}

${pastEntriesText}`;
      return await this.openAIService.makeOpenAIRequest(prompt, onChunk);
    } catch (error) {
      new import_obsidian3.Notice(`Error generating prompt: ${error.message}`);
      throw error;
    }
  }
};

// src/prompts/chatPrompt.ts
var chatPrompt_default = `As an AI journaling assistant, you are helping the user explore their thoughts and goals.
Guiding principles:
\u2022 Maintain a friendly, empathetic tone
\u2022 Ask clarifying questions or deeper prompts
\u2022 Avoid steering the user to specific beliefs or conclusions
\u2022 Keep the conversation relevant to the user\u2019s stated goals
\u2022 Encourage reflection and actionable outcomes where appropriate
Remember: all interactions take place in the user\u2019s note.`;

// src/services/ChatService.ts
var ChatService = class {
  constructor(openAIService) {
    this.openAIService = openAIService;
  }
  /**
   * Sends the user’s note content (with any transcribed text) to OpenAI
   * and returns a friendly, conversational response.
   */
  async chat(transcribedText) {
    const prompt = `${chatPrompt_default}

User: ${transcribedText}

Assistant:`;
    return this.openAIService.makeOpenAIRequest(prompt);
  }
};

// src/services/JournalService.ts
var JournalService = class {
  constructor(app, settings, openAIService) {
    this.app = app;
    this.settings = settings;
    this.openAIService = openAIService;
    this.whisperService = new WhisperService(this.app.vault, this.settings.openAIApiKey);
    this.summarizationService = new SummarizationService(this.openAIService);
    this.promptService = new PromptService(this.openAIService);
    this.chatService = new ChatService(this.openAIService);
    this.transcriptionService = new TranscriptionService(this.app, this.settings);
  }
  updateSettings(settings) {
    this.settings = settings;
    this.whisperService.setApiKey(settings.openAIApiKey);
    this.transcriptionService.updateSettings(settings);
    this.openAIService.updateSettings(settings);
  }
  getTodayFileName() {
    const date = new Date();
    return date.toISOString().split("T")[0] + ".md";
  }
  async ensureFolder(folderPath) {
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  async getPastJournalEntries(count) {
    const folder = this.app.vault.getAbstractFileByPath(this.settings.journalFolder);
    if (!folder)
      return [];
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(this.settings.journalFolder + "/")).sort((a, b) => b.stat.mtime - a.stat.mtime).slice(0, count);
    const entries = await Promise.all(
      files.map(async (file) => {
        const content = await this.app.vault.read(file);
        return {
          date: file.basename,
          content
        };
      })
    );
    return entries.map((entry) => `Date: ${entry.date}
${entry.content}`);
  }
  async openTodaysJournal() {
    try {
      await this.ensureFolder(this.settings.journalFolder);
      const fileName = this.getTodayFileName();
      const filePath = `${this.settings.journalFolder}/${fileName}`;
      let file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        let initialContent = `# Journal Entry - ${new Date().toLocaleDateString()}

`;
        file = await this.app.vault.create(filePath, initialContent);
        try {
          const loadingNotice = new import_obsidian4.Notice("Generating journal prompt...", 0);
          const pastEntries = await this.getPastJournalEntries(this.settings.numberOfPastEntries);
          const leaf = this.app.workspace.getLeaf(false);
          await leaf.openFile(file);
          const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
          if (view) {
            if (this.settings.useStreamingResponse) {
              await this.promptService.generatePrompt(pastEntries, (chunk) => {
                const currentContent = view.editor.getValue();
                view.editor.setValue(currentContent + chunk);
              });
            } else {
              const aiPrompt = await this.promptService.generatePrompt(pastEntries);
              view.editor.setValue(view.editor.getValue() + aiPrompt);
            }
            const finalContent = view.editor.getValue();
            view.editor.setValue(finalContent + "\n\n## Your Journal Response\n\n");
          }
          loadingNotice.hide();
          new import_obsidian4.Notice("Created new journal entry for today");
        } catch (error) {
          new import_obsidian4.Notice("Error generating prompt: " + error.message);
          const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
          if (view) {
            view.editor.setValue(view.editor.getValue() + "\n\n## Your Journal Response\n\n");
          }
        }
      } else {
        const leaf = this.app.workspace.getLeaf(false);
        await leaf.openFile(file);
      }
    } catch (error) {
      new import_obsidian4.Notice("Error opening today's journal: " + error.message);
      console.error("Error opening today's journal:", error);
    }
  }
  async summarizeJournalingSession() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (!activeView) {
      new import_obsidian4.Notice("Please open a note first");
      return;
    }
    if (!activeView.file) {
      new import_obsidian4.Notice("No file is currently open");
      return;
    }
    try {
      const originalContent = activeView.editor.getValue();
      const fileName = activeView.file.name;
      const inputPath = `${this.settings.inputsFolder}/${fileName}`;
      await this.ensureFolder(this.settings.inputsFolder);
      await this.app.vault.create(inputPath, originalContent);
      let processedContent = await this.processContent(originalContent);
      const responseMatch = processedContent.match(/## Your Journal Response\n\n([\s\S]*$)/);
      if (!responseMatch) {
        new import_obsidian4.Notice("Could not find journal response section");
        return;
      }
      const userResponse = responseMatch[1];
      let summary;
      if (this.settings.useStreamingResponse) {
        let streamedSummary = "";
        summary = await this.summarizationService.summarize(
          userResponse,
          true,
          (chunk) => {
            streamedSummary += chunk;
            const updatedContent2 = processedContent.replace(
              /## Your Journal Response\n\n[\s\S]*$/,
              `## Your Journal Response

${streamedSummary}`
            );
            activeView.editor.setValue(updatedContent2);
          }
        );
      } else {
        summary = await this.summarizationService.summarize(userResponse);
      }
      const updatedContent = processedContent.replace(
        /## Your Journal Response\n\n[\s\S]*$/,
        `## Your Journal Response

${summary}`
      );
      activeView.editor.setValue(updatedContent);
      new import_obsidian4.Notice("Journal session summarized");
    } catch (error) {
      new import_obsidian4.Notice(`Error: ${error.message}`);
      console.error("Summarization error:", error);
    }
  }
  async processContent(content) {
    const recordingPattern = TranscriptionService.getRecordingEmbedPattern();
    const recordings = content.match(recordingPattern);
    if (!recordings)
      return content;
    let processedContent = content;
    for (const recording of recordings) {
      const fileName = recording.slice(3, -2);
      const file = this.app.metadataCache.getFirstLinkpathDest(fileName, "");
      if (file instanceof import_obsidian4.TFile) {
        const transcript = await this.whisperService.transcribeFile(file);
        processedContent = processedContent.replace(recording, transcript);
      }
    }
    return processedContent;
  }
  async chatWithAI() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (!activeView) {
      new import_obsidian4.Notice("Please open a note first");
      return;
    }
    await this.transcriptionService.transcribeRecordings();
    const content = activeView.editor.getValue();
    try {
      const chatResponse = await this.chatService.chat(content);
      activeView.editor.setValue(
        content + "\n\n## AI Chat\n\n" + chatResponse
      );
      new import_obsidian4.Notice("AI responded in note");
    } catch (error) {
      new import_obsidian4.Notice(`Error during chat: ${error.message}`);
    }
  }
};

// src/services/OpenAIService.ts
var OpenAIService = class {
  constructor(settings) {
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  async makeOpenAIRequest(prompt, onChunk) {
    var _a, _b, _c, _d;
    if (!this.settings.openAIApiKey) {
      throw new Error("OpenAI API key not configured");
    }
    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.openAIApiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.7,
          stream: !!onChunk
          // Enable streaming if onChunk callback is provided
        })
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(((_a = error.error) == null ? void 0 : _a.message) || "API request failed");
      }
      if (onChunk) {
        const reader = (_b = response.body) == null ? void 0 : _b.getReader();
        const decoder = new TextDecoder();
        let fullResponse = "";
        if (!reader)
          throw new Error("Response body is null");
        while (true) {
          const { done, value } = await reader.read();
          if (done)
            break;
          const chunk = decoder.decode(value);
          const lines = chunk.split("\n").filter((line) => line.trim() !== "");
          for (const line of lines) {
            if (line.includes("[DONE]"))
              continue;
            if (!line.startsWith("data:"))
              continue;
            try {
              const json = JSON.parse(line.slice(5));
              const content = (_d = (_c = json.choices[0]) == null ? void 0 : _c.delta) == null ? void 0 : _d.content;
              if (content) {
                fullResponse += content;
                onChunk(content);
              }
            } catch (e) {
              console.warn("Failed to parse streaming response:", e);
            }
          }
        }
        return fullResponse;
      }
      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API error:", error);
      throw error;
    }
  }
};

// src/settings/SettingTab.ts
var import_obsidian5 = require("obsidian");
var JournalingAssistantSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Journaling Assistant Settings" });
    new import_obsidian5.Setting(containerEl).setName("Journal Folder").setDesc("The folder where your journal entries will be stored").addText((text) => text.setPlaceholder("Journal").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Journal Inputs Folder").setDesc("The folder where your journal inputs will be stored").addText((text) => text.setPlaceholder("Inputs").setValue(this.plugin.settings.inputsFolder).onChange(async (value) => {
      this.plugin.settings.inputsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API key for generating prompts and summaries").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.openAIApiKey).onChange(async (value) => {
      this.plugin.settings.openAIApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Number of Past Entries").setDesc("Number of past journal entries to consider when generating prompts").addSlider((slider) => slider.setLimits(0, 10, 1).setValue(this.plugin.settings.numberOfPastEntries).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.numberOfPastEntries = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Use Streaming Response").setDesc("Stream AI responses in real-time (recommended for better experience)").addToggle((toggle) => toggle.setValue(this.plugin.settings.useStreamingResponse).onChange(async (value) => {
      this.plugin.settings.useStreamingResponse = value;
      await this.plugin.saveSettings();
    }));
  }
};

// main.ts
var JournalingAssistantPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    await this.loadSettings();
    this.openAIService = new OpenAIService(this.settings);
    this.journalService = new JournalService(this.app, this.settings, this.openAIService);
    this.transcriptionService = new TranscriptionService(this.app, this.settings);
    this.addSettingTab(new JournalingAssistantSettingTab(this.app, this));
    this.addRibbonIcon("bot", "Journaling Assistant", (evt) => {
      const menu = new import_obsidian6.Menu();
      menu.addItem(
        (item) => item.setTitle("Open Today's Journal").onClick(() => {
          this.journalService.openTodaysJournal();
        })
      );
      menu.addItem(
        (item) => item.setTitle("Chat with AI").onClick(() => {
          this.journalService.chatWithAI();
        })
      );
      menu.addItem(
        (item) => item.setTitle("Summarize Journaling Session").onClick(() => {
          this.journalService.summarizeJournalingSession();
        })
      );
      menu.showAtMouseEvent(evt);
    });
    this.addCommands();
  }
  addCommands() {
    this.addCommand({
      id: "open-todays-journal",
      name: "Open Today's Journal",
      callback: async () => {
        await this.journalService.openTodaysJournal();
      }
    });
    this.addCommand({
      id: "transcribe-recordings",
      name: "Transcribe Recordings",
      callback: async () => {
        await this.transcriptionService.transcribeRecordings();
      }
    });
    this.addCommand({
      id: "summarize-journal",
      name: "Summarize Journaling Session",
      callback: async () => {
        await this.journalService.summarizeJournalingSession();
      }
    });
    this.addCommand({
      id: "chat-with-ai",
      name: "Chat with AI",
      callback: async () => {
        await this.journalService.chatWithAI();
      }
    });
  }
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
    console.log(this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.openAIService = new OpenAIService(this.settings);
    this.transcriptionService.updateSettings(this.settings);
    this.journalService.updateSettings(this.settings);
  }
  onunload() {
    console.log("Unloading Journaling Assistant Plugin...");
  }
};
var main_default = JournalingAssistantPlugin;
//# sourceMappingURL=data:application/json;base64,
