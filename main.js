/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalingAssistantPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  journalFolder: "Journal",
  inputsFolder: "Inputs",
  openAIApiKey: "",
  defaultJournalingPrompt: "Generate a thought-provoking journaling prompt for today.",
  defaultSummarizationPrompt: "Summarize the key points and insights from this journal entry.",
  numberOfPastEntries: 3
};

// src/audioTranscriber.ts
var AudioTranscriber = class {
  constructor(vault, apiKey) {
    this.vault = vault;
    this.apiKey = apiKey;
  }
  async transcribeFile(audioFile) {
    var _a;
    try {
      const arrayBuffer = await this.vault.readBinary(audioFile);
      const blob = new Blob([arrayBuffer], { type: "audio/webm" });
      const formData = new FormData();
      formData.append("file", blob, audioFile.name);
      formData.append("model", "whisper-1");
      const response = await fetch("https://api.openai.com/v1/audio/transcriptions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`
        },
        body: formData
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(((_a = error.error) == null ? void 0 : _a.message) || "Transcription failed");
      }
      const result = await response.json();
      return result.text;
    } catch (error) {
      console.error("Transcription error:", error);
      throw error;
    }
  }
  static getRecordingEmbedPattern() {
    return /!\[\[Recording \d{14}\.webm\]\]/g;
  }
};

// main.ts
var JournalingAssistantPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new JournalingAssistantSettingTab(this.app, this));
    this.addRibbonIcon("bot", "Journal with AI", async () => {
      await this.openTodaysJournal();
    });
    this.addCommand({
      id: "open-todays-journal",
      name: "Open Today's Journal",
      callback: async () => {
        await this.openTodaysJournal();
      }
    });
    this.addCommand({
      id: "transcribe-recordings",
      name: "Transcribe Recordings",
      callback: async () => {
        await this.transcribeRecordings();
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    console.log("Unloading Journaling Assistant Plugin...");
  }
  getTodayFileName() {
    const date = new Date();
    return date.toISOString().split("T")[0] + ".md";
  }
  async ensureJournalFolder() {
    const folderPath = this.settings.journalFolder;
    if (!await this.app.vault.adapter.exists(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  async getPastJournalEntries(count) {
    const folder = this.app.vault.getAbstractFileByPath(this.settings.journalFolder);
    if (!folder)
      return [];
    const files = this.app.vault.getMarkdownFiles().filter((file) => file.path.startsWith(this.settings.journalFolder + "/")).sort((a, b) => b.stat.mtime - a.stat.mtime).slice(0, count);
    const entries = await Promise.all(
      files.map(async (file) => {
        const content = await this.app.vault.read(file);
        return {
          date: file.basename,
          content
        };
      })
    );
    return entries.map((entry) => `Date: ${entry.date}
${entry.content}`);
  }
  async generatePromptWithAI(pastEntries) {
    var _a;
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured. Please add your API key in settings.");
      throw new Error("OpenAI API key not configured");
    }
    const prompt = `Based on these past journal entries:

${pastEntries.join("\n\n---\n\n")}

${this.settings.defaultJournalingPrompt}`;
    console.log("=== GPT API Call Debug ===");
    console.log("Past Entries Count:", pastEntries.length);
    console.log("Prompt:", prompt);
    console.log("API Key (first 4 chars):", this.settings.openAIApiKey.slice(0, 4));
    try {
      const requestBody = {
        model: "gpt-4o",
        messages: [{
          role: "user",
          content: prompt
        }],
        temperature: 0.7
      };
      console.log("Request Body:", JSON.stringify(requestBody, null, 2));
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.openAIApiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      const data = await response.json();
      console.log("Response:", JSON.stringify(data, null, 2));
      if (!response.ok) {
        console.error("OpenAI API error details:", {
          status: response.status,
          statusText: response.statusText,
          error: data.error
        });
        const errorMessage = ((_a = data.error) == null ? void 0 : _a.message) || "API request failed";
        new import_obsidian.Notice(`OpenAI API Error: ${errorMessage}`);
        throw new Error(errorMessage);
      }
      return data.choices[0].message.content;
    } catch (error) {
      console.error("OpenAI API error:", {
        name: error.name,
        message: error.message,
        stack: error.stack,
        cause: error.cause
      });
      const userMessage = error.message.includes("Failed to fetch") ? "Cannot connect to OpenAI API. Please check your internet connection." : `Error: ${error.message}`;
      new import_obsidian.Notice(userMessage);
      throw new Error("Failed to generate prompt: " + error.message);
    }
  }
  async openTodaysJournal() {
    try {
      await this.ensureJournalFolder();
      const fileName = this.getTodayFileName();
      const filePath = `${this.settings.journalFolder}/${fileName}`;
      console.log("Opening journal with:", {
        fileName,
        filePath,
        journalFolder: this.settings.journalFolder
      });
      let file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        let initialContent = `# Journal Entry - ${new Date().toLocaleDateString()}

`;
        try {
          const pastEntries = await this.getPastJournalEntries(this.settings.numberOfPastEntries);
          if (pastEntries.length > 0) {
            const aiPrompt = await this.generatePromptWithAI(pastEntries);
            initialContent += `## Today's Prompt

${aiPrompt}

## Your Journal Response

`;
          } else {
            initialContent += `## Your Journal Response

`;
          }
        } catch (error) {
          new import_obsidian.Notice("Error generating prompt: " + error.message);
          initialContent += `## Your Journal Response

`;
        }
        file = await this.app.vault.create(filePath, initialContent);
        new import_obsidian.Notice("Created new journal entry for today");
      }
      const leaf = this.app.workspace.getLeaf(false);
      await leaf.openFile(file);
    } catch (error) {
      new import_obsidian.Notice("Error opening today's journal: " + error.message);
      console.error("Error opening today's journal:", error);
    }
  }
  async transcribeRecordings() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("Please open a note first");
      return;
    }
    if (!this.settings.openAIApiKey) {
      new import_obsidian.Notice("OpenAI API key not configured. Please add your API key in settings.");
      return;
    }
    const editor = activeView.editor;
    const content = editor.getValue();
    const recordingPattern = AudioTranscriber.getRecordingEmbedPattern();
    const recordings = content.match(recordingPattern);
    if (!recordings || recordings.length === 0) {
      new import_obsidian.Notice("No recordings found in the current note");
      return;
    }
    new import_obsidian.Notice("Starting transcription...");
    const transcriber = new AudioTranscriber(this.app.vault, this.settings.openAIApiKey);
    let updatedContent = content;
    try {
      for (const recording of recordings) {
        const fileName = recording.slice(3, -2);
        const file = this.app.metadataCache.getFirstLinkpathDest(fileName, "");
        console.log("Processing recording:", {
          originalLink: recording,
          parsedFileName: fileName,
          resolvedFile: file == null ? void 0 : file.path
        });
        if (file instanceof import_obsidian.TFile) {
          console.log("Sending transcription request for:", file.path);
          const transcript = await transcriber.transcribeFile(file);
          console.log("Received transcription:", transcript);
          updatedContent = updatedContent.replace(recording, transcript);
        }
      }
      editor.setValue(updatedContent);
      new import_obsidian.Notice("Transcription completed successfully");
    } catch (error) {
      new import_obsidian.Notice(`Transcription failed: ${error.message}`);
      console.error("Transcription error:", error);
    }
  }
};
var JournalingAssistantSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Journaling Assistant Settings" });
    new import_obsidian.Setting(containerEl).setName("Journal Folder").setDesc("The folder where your journal entries will be stored").addText((text) => text.setPlaceholder("Journal").setValue(this.plugin.settings.journalFolder).onChange(async (value) => {
      this.plugin.settings.journalFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Journal Inputs Folder").setDesc("The folder where your journal inputs will be stored").addText((text) => text.setPlaceholder("Inputs").setValue(this.plugin.settings.inputsFolder).onChange(async (value) => {
      this.plugin.settings.inputsFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API key for generating prompts, summaries, and transcriptions").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.openAIApiKey).onChange(async (value) => {
      this.plugin.settings.openAIApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Journaling Prompt").setDesc("The default prompt used to generate journaling questions").addTextArea((text) => text.setPlaceholder("Generate a thought-provoking journaling prompt for today.").setValue(this.plugin.settings.defaultJournalingPrompt).onChange(async (value) => {
      this.plugin.settings.defaultJournalingPrompt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Summarization Prompt").setDesc("The default prompt used to generate journal entry summaries").addTextArea((text) => text.setPlaceholder("Summarize the key points and insights from this journal entry.").setValue(this.plugin.settings.defaultSummarizationPrompt).onChange(async (value) => {
      this.plugin.settings.defaultSummarizationPrompt = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Number of Past Entries").setDesc("Number of past journal entries to consider when generating prompts").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.numberOfPastEntries).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.numberOfPastEntries = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvdHlwZXMudHMiLCAic3JjL2F1ZGlvVHJhbnNjcmliZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBOb3RpY2UsIE1hcmtkb3duVmlldywgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBKb3VybmFsaW5nQXNzaXN0YW50U2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL3NyYy90eXBlcyc7XG5pbXBvcnQgeyBBdWRpb1RyYW5zY3JpYmVyIH0gZnJvbSAnLi9zcmMvYXVkaW9UcmFuc2NyaWJlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpvdXJuYWxpbmdBc3Npc3RhbnRQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHNldHRpbmdzOiBKb3VybmFsaW5nQXNzaXN0YW50U2V0dGluZ3M7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICAgICAgLy8gQWRkIHNldHRpbmdzIHRhYlxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEpvdXJuYWxpbmdBc3Npc3RhbnRTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cbiAgICAgICAgLy8gQWRkIHJpYmJvbiBpY29uXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignYm90JywgJ0pvdXJuYWwgd2l0aCBBSScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMub3BlblRvZGF5c0pvdXJuYWwoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIGNvbW1hbmQgZm9yIG9wZW5pbmcgdG9kYXkncyBqb3VybmFsXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ29wZW4tdG9kYXlzLWpvdXJuYWwnLFxuICAgICAgICAgICAgbmFtZTogJ09wZW4gVG9kYXlcXCdzIEpvdXJuYWwnLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm9wZW5Ub2RheXNKb3VybmFsKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBZGQgY29tbWFuZCBmb3IgdHJhbnNjcmliaW5nIHJlY29yZGluZ3NcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAndHJhbnNjcmliZS1yZWNvcmRpbmdzJyxcbiAgICAgICAgICAgIG5hbWU6ICdUcmFuc2NyaWJlIFJlY29yZGluZ3MnLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRyYW5zY3JpYmVSZWNvcmRpbmdzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcbiAgICB9XG5cbiAgICBvbnVubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVbmxvYWRpbmcgSm91cm5hbGluZyBBc3Npc3RhbnQgUGx1Z2luLi4uXCIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VG9kYXlGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdICsgJy5tZCc7IC8vIEZvcm1hdDogWVlZWS1NTS1ERC5tZFxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZW5zdXJlSm91cm5hbEZvbGRlcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IHRoaXMuc2V0dGluZ3Muam91cm5hbEZvbGRlcjtcbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZm9sZGVyUGF0aCkpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIoZm9sZGVyUGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldFBhc3RKb3VybmFsRW50cmllcyhjb3VudDogbnVtYmVyKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICBjb25zdCBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5zZXR0aW5ncy5qb3VybmFsRm9sZGVyKTtcbiAgICAgICAgaWYgKCFmb2xkZXIpIHJldHVybiBbXTtcblxuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKVxuICAgICAgICAgICAgLmZpbHRlcihmaWxlID0+IGZpbGUucGF0aC5zdGFydHNXaXRoKHRoaXMuc2V0dGluZ3Muam91cm5hbEZvbGRlciArICcvJykpXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5zdGF0Lm10aW1lIC0gYS5zdGF0Lm10aW1lKVxuICAgICAgICAgICAgLnNsaWNlKDAsIGNvdW50KTtcblxuICAgICAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICBmaWxlcy5tYXAoYXN5bmMgZmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBlbnRyaWVzLm1hcChlbnRyeSA9PiBgRGF0ZTogJHtlbnRyeS5kYXRlfVxcbiR7ZW50cnkuY29udGVudH1gKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlUHJvbXB0V2l0aEFJKHBhc3RFbnRyaWVzOiBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5vcGVuQUlBcGlLZXkpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ09wZW5BSSBBUEkga2V5IG5vdCBjb25maWd1cmVkLiBQbGVhc2UgYWRkIHlvdXIgQVBJIGtleSBpbiBzZXR0aW5ncy4nKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb21wdCA9IGBCYXNlZCBvbiB0aGVzZSBwYXN0IGpvdXJuYWwgZW50cmllczpcXG5cXG4ke3Bhc3RFbnRyaWVzLmpvaW4oJ1xcblxcbi0tLVxcblxcbicpfVxcblxcbiR7dGhpcy5zZXR0aW5ncy5kZWZhdWx0Sm91cm5hbGluZ1Byb21wdH1gO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGRlYnVnIGxvZ2dpbmdcbiAgICAgICAgY29uc29sZS5sb2coJz09PSBHUFQgQVBJIENhbGwgRGVidWcgPT09Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQYXN0IEVudHJpZXMgQ291bnQ6JywgcGFzdEVudHJpZXMubGVuZ3RoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1Byb21wdDonLCBwcm9tcHQpO1xuICAgICAgICBjb25zb2xlLmxvZygnQVBJIEtleSAoZmlyc3QgNCBjaGFycyk6JywgdGhpcy5zZXR0aW5ncy5vcGVuQUlBcGlLZXkuc2xpY2UoMCwgNCkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHtcbiAgICAgICAgICAgICAgICBtb2RlbDogJ2dwdC00bycsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFt7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogcHJvbXB0XG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExvZyB0aGUgcmVxdWVzdFxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlcXVlc3QgQm9keTonLCBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSwgbnVsbCwgMikpO1xuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLnNldHRpbmdzLm9wZW5BSUFwaUtleX1gLFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExvZyB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXNwb25zZTonLCBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPcGVuQUkgQVBJIGVycm9yIGRldGFpbHM6Jywge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGRhdGEuZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBkYXRhLmVycm9yPy5tZXNzYWdlIHx8ICdBUEkgcmVxdWVzdCBmYWlsZWQnO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYE9wZW5BSSBBUEkgRXJyb3I6ICR7ZXJyb3JNZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ09wZW5BSSBBUEkgZXJyb3I6Jywge1xuICAgICAgICAgICAgICAgIG5hbWU6IGVycm9yLm5hbWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgICAgICAgICAgICAgY2F1c2U6IGVycm9yLmNhdXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2hvdyBhIHVzZXItZnJpZW5kbHkgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgY29uc3QgdXNlck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdGYWlsZWQgdG8gZmV0Y2gnKSBcbiAgICAgICAgICAgICAgICA/ICdDYW5ub3QgY29ubmVjdCB0byBPcGVuQUkgQVBJLiBQbGVhc2UgY2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uLidcbiAgICAgICAgICAgICAgICA6IGBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWA7XG4gICAgICAgICAgICBuZXcgTm90aWNlKHVzZXJNZXNzYWdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgcHJvbXB0OiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9wZW5Ub2RheXNKb3VybmFsKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVKb3VybmFsRm9sZGVyKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gdGhpcy5nZXRUb2RheUZpbGVOYW1lKCk7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGAke3RoaXMuc2V0dGluZ3Muam91cm5hbEZvbGRlcn0vJHtmaWxlTmFtZX1gO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgZGVidWcgbG9nZ2luZ1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ09wZW5pbmcgam91cm5hbCB3aXRoOicsIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCxcbiAgICAgICAgICAgICAgICBqb3VybmFsRm9sZGVyOiB0aGlzLnNldHRpbmdzLmpvdXJuYWxGb2xkZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlUGF0aCk7XG5cbiAgICAgICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgZ2VuZXJhdGUgcHJvbXB0IGlmIGNyZWF0aW5nIGEgbmV3IGZpbGVcbiAgICAgICAgICAgICAgICBsZXQgaW5pdGlhbENvbnRlbnQgPSBgIyBKb3VybmFsIEVudHJ5IC0gJHtuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzdEVudHJpZXMgPSBhd2FpdCB0aGlzLmdldFBhc3RKb3VybmFsRW50cmllcyh0aGlzLnNldHRpbmdzLm51bWJlck9mUGFzdEVudHJpZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFzdEVudHJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWlQcm9tcHQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlUHJvbXB0V2l0aEFJKHBhc3RFbnRyaWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZW50ICs9IGAjIyBUb2RheSdzIFByb21wdFxcblxcbiR7YWlQcm9tcHR9XFxuXFxuIyMgWW91ciBKb3VybmFsIFJlc3BvbnNlXFxuXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZW50ICs9IGAjIyBZb3VyIEpvdXJuYWwgUmVzcG9uc2VcXG5cXG5gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRXJyb3IgZ2VuZXJhdGluZyBwcm9tcHQ6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRlbnQgKz0gYCMjIFlvdXIgSm91cm5hbCBSZXNwb25zZVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZmlsZSA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShmaWxlUGF0aCwgaW5pdGlhbENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0NyZWF0ZWQgbmV3IGpvdXJuYWwgZW50cnkgZm9yIHRvZGF5Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZihmYWxzZSk7XG4gICAgICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKGZpbGUgYXMgVEZpbGUpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdFcnJvciBvcGVuaW5nIHRvZGF5XFwncyBqb3VybmFsOiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvcGVuaW5nIHRvZGF5XFwncyBqb3VybmFsOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdHJhbnNjcmliZVJlY29yZGluZ3MoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICAgICAgICBpZiAoIWFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1BsZWFzZSBvcGVuIGEgbm90ZSBmaXJzdCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLm9wZW5BSUFwaUtleSkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnT3BlbkFJIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQuIFBsZWFzZSBhZGQgeW91ciBBUEkga2V5IGluIHNldHRpbmdzLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZWRpdG9yID0gYWN0aXZlVmlldy5lZGl0b3I7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBlZGl0b3IuZ2V0VmFsdWUoKTtcbiAgICAgICAgY29uc3QgcmVjb3JkaW5nUGF0dGVybiA9IEF1ZGlvVHJhbnNjcmliZXIuZ2V0UmVjb3JkaW5nRW1iZWRQYXR0ZXJuKCk7XG4gICAgICAgIGNvbnN0IHJlY29yZGluZ3MgPSBjb250ZW50Lm1hdGNoKHJlY29yZGluZ1BhdHRlcm4pO1xuXG4gICAgICAgIGlmICghcmVjb3JkaW5ncyB8fCByZWNvcmRpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gcmVjb3JkaW5ncyBmb3VuZCBpbiB0aGUgY3VycmVudCBub3RlJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXcgTm90aWNlKCdTdGFydGluZyB0cmFuc2NyaXB0aW9uLi4uJyk7XG5cbiAgICAgICAgY29uc3QgdHJhbnNjcmliZXIgPSBuZXcgQXVkaW9UcmFuc2NyaWJlcih0aGlzLmFwcC52YXVsdCwgdGhpcy5zZXR0aW5ncy5vcGVuQUlBcGlLZXkpO1xuICAgICAgICBsZXQgdXBkYXRlZENvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZGluZyBvZiByZWNvcmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSByZWNvcmRpbmcuc2xpY2UoMywgLTIpOyAvLyBSZW1vdmUgIVtbLi4uXV1cbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChmaWxlTmFtZSwgXCJcIik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWRkIGxvZ2dpbmdcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyByZWNvcmRpbmc6Jywge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbExpbms6IHJlY29yZGluZyxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkRmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZEZpbGU6IGZpbGU/LnBhdGhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NlbmRpbmcgdHJhbnNjcmlwdGlvbiByZXF1ZXN0IGZvcjonLCBmaWxlLnBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2NyaXB0ID0gYXdhaXQgdHJhbnNjcmliZXIudHJhbnNjcmliZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCB0cmFuc2NyaXB0aW9uOicsIHRyYW5zY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZENvbnRlbnQgPSB1cGRhdGVkQ29udGVudC5yZXBsYWNlKHJlY29yZGluZywgdHJhbnNjcmlwdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlZGl0b3Iuc2V0VmFsdWUodXBkYXRlZENvbnRlbnQpO1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnVHJhbnNjcmlwdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBUcmFuc2NyaXB0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVHJhbnNjcmlwdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEpvdXJuYWxpbmdBc3Npc3RhbnRTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBKb3VybmFsaW5nQXNzaXN0YW50UGx1Z2luO1xuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogSm91cm5hbGluZ0Fzc2lzdGFudFBsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnSm91cm5hbGluZyBBc3Npc3RhbnQgU2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0pvdXJuYWwgRm9sZGVyJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgZm9sZGVyIHdoZXJlIHlvdXIgam91cm5hbCBlbnRyaWVzIHdpbGwgYmUgc3RvcmVkJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignSm91cm5hbCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmpvdXJuYWxGb2xkZXIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5qb3VybmFsRm9sZGVyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdKb3VybmFsIElucHV0cyBGb2xkZXInKVxuICAgICAgICAgICAgLnNldERlc2MoJ1RoZSBmb2xkZXIgd2hlcmUgeW91ciBqb3VybmFsIGlucHV0cyB3aWxsIGJlIHN0b3JlZCcpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0lucHV0cycpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmlucHV0c0ZvbGRlcilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmlucHV0c0ZvbGRlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnT3BlbkFJIEFQSSBLZXknKVxuICAgICAgICAgICAgLnNldERlc2MoJ1lvdXIgT3BlbkFJIEFQSSBrZXkgZm9yIGdlbmVyYXRpbmcgcHJvbXB0cywgc3VtbWFyaWVzLCBhbmQgdHJhbnNjcmlwdGlvbnMnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdzay0uLi4nKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuQUlBcGlLZXkpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuQUlBcGlLZXkgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0RlZmF1bHQgSm91cm5hbGluZyBQcm9tcHQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ1RoZSBkZWZhdWx0IHByb21wdCB1c2VkIHRvIGdlbmVyYXRlIGpvdXJuYWxpbmcgcXVlc3Rpb25zJylcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0dlbmVyYXRlIGEgdGhvdWdodC1wcm92b2tpbmcgam91cm5hbGluZyBwcm9tcHQgZm9yIHRvZGF5LicpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRKb3VybmFsaW5nUHJvbXB0KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdEpvdXJuYWxpbmdQcm9tcHQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0RlZmF1bHQgU3VtbWFyaXphdGlvbiBQcm9tcHQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ1RoZSBkZWZhdWx0IHByb21wdCB1c2VkIHRvIGdlbmVyYXRlIGpvdXJuYWwgZW50cnkgc3VtbWFyaWVzJylcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ1N1bW1hcml6ZSB0aGUga2V5IHBvaW50cyBhbmQgaW5zaWdodHMgZnJvbSB0aGlzIGpvdXJuYWwgZW50cnkuJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFN1bW1hcml6YXRpb25Qcm9tcHQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0U3VtbWFyaXphdGlvblByb21wdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnTnVtYmVyIG9mIFBhc3QgRW50cmllcycpXG4gICAgICAgICAgICAuc2V0RGVzYygnTnVtYmVyIG9mIHBhc3Qgam91cm5hbCBlbnRyaWVzIHRvIGNvbnNpZGVyIHdoZW4gZ2VuZXJhdGluZyBwcm9tcHRzJylcbiAgICAgICAgICAgIC5hZGRTbGlkZXIoc2xpZGVyID0+IHNsaWRlclxuICAgICAgICAgICAgICAgIC5zZXRMaW1pdHMoMSwgMTAsIDEpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm51bWJlck9mUGFzdEVudHJpZXMpXG4gICAgICAgICAgICAgICAgLnNldER5bmFtaWNUb29sdGlwKClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm51bWJlck9mUGFzdEVudHJpZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsICJleHBvcnQgaW50ZXJmYWNlIEpvdXJuYWxpbmdBc3Npc3RhbnRTZXR0aW5ncyB7XG4gICAgam91cm5hbEZvbGRlcjogc3RyaW5nO1xuICAgIGlucHV0c0ZvbGRlcjogc3RyaW5nO1xuICAgIG9wZW5BSUFwaUtleTogc3RyaW5nO1xuICAgIGRlZmF1bHRKb3VybmFsaW5nUHJvbXB0OiBzdHJpbmc7XG4gICAgZGVmYXVsdFN1bW1hcml6YXRpb25Qcm9tcHQ6IHN0cmluZztcbiAgICBudW1iZXJPZlBhc3RFbnRyaWVzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBKb3VybmFsaW5nQXNzaXN0YW50U2V0dGluZ3MgPSB7XG4gICAgam91cm5hbEZvbGRlcjogJ0pvdXJuYWwnLFxuICAgIGlucHV0c0ZvbGRlcjogJ0lucHV0cycsXG4gICAgb3BlbkFJQXBpS2V5OiAnJyxcbiAgICBkZWZhdWx0Sm91cm5hbGluZ1Byb21wdDogJ0dlbmVyYXRlIGEgdGhvdWdodC1wcm92b2tpbmcgam91cm5hbGluZyBwcm9tcHQgZm9yIHRvZGF5LicsXG4gICAgZGVmYXVsdFN1bW1hcml6YXRpb25Qcm9tcHQ6ICdTdW1tYXJpemUgdGhlIGtleSBwb2ludHMgYW5kIGluc2lnaHRzIGZyb20gdGhpcyBqb3VybmFsIGVudHJ5LicsXG4gICAgbnVtYmVyT2ZQYXN0RW50cmllczogMyxcbn07ICIsICJpbXBvcnQgeyBOb3RpY2UsIFRGaWxlLCBWYXVsdCB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIEF1ZGlvVHJhbnNjcmliZXIge1xuICAgIHByaXZhdGUgdmF1bHQ6IFZhdWx0O1xuICAgIHByaXZhdGUgYXBpS2V5OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcih2YXVsdDogVmF1bHQsIGFwaUtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmF1bHQgPSB2YXVsdDtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgfVxuXG4gICAgYXN5bmMgdHJhbnNjcmliZUZpbGUoYXVkaW9GaWxlOiBURmlsZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHRoaXMudmF1bHQucmVhZEJpbmFyeShhdWRpb0ZpbGUpO1xuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFthcnJheUJ1ZmZlcl0sIHsgdHlwZTogJ2F1ZGlvL3dlYm0nIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgYmxvYiwgYXVkaW9GaWxlLm5hbWUpO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdtb2RlbCcsICd3aGlzcGVyLTEnKTtcblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9hdWRpby90cmFuc2NyaXB0aW9ucycsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuYXBpS2V5fWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLmVycm9yPy5tZXNzYWdlIHx8ICdUcmFuc2NyaXB0aW9uIGZhaWxlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRleHQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdUcmFuc2NyaXB0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFJlY29yZGluZ0VtYmVkUGF0dGVybigpOiBSZWdFeHAge1xuICAgICAgICByZXR1cm4gLyFcXFtcXFtSZWNvcmRpbmcgXFxkezE0fVxcLndlYm1cXF1cXF0vZztcbiAgICB9XG59ICJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBb0Y7OztBQ1M3RSxJQUFNLG1CQUFnRDtBQUFBLEVBQ3pELGVBQWU7QUFBQSxFQUNmLGNBQWM7QUFBQSxFQUNkLGNBQWM7QUFBQSxFQUNkLHlCQUF5QjtBQUFBLEVBQ3pCLDRCQUE0QjtBQUFBLEVBQzVCLHFCQUFxQjtBQUN6Qjs7O0FDZE8sSUFBTSxtQkFBTixNQUF1QjtBQUFBLEVBSTFCLFlBQVksT0FBYyxRQUFnQjtBQUN0QyxTQUFLLFFBQVE7QUFDYixTQUFLLFNBQVM7QUFBQSxFQUNsQjtBQUFBLEVBRUEsTUFBTSxlQUFlLFdBQW1DO0FBWDVEO0FBWVEsUUFBSTtBQUNBLFlBQU0sY0FBYyxNQUFNLEtBQUssTUFBTSxXQUFXLFNBQVM7QUFDekQsWUFBTSxPQUFPLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTNELFlBQU0sV0FBVyxJQUFJLFNBQVM7QUFDOUIsZUFBUyxPQUFPLFFBQVEsTUFBTSxVQUFVLElBQUk7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
